{"ast":null,"code":"var _jsxFileName = \"/Users/suchirmvelpanur/Desktop/netflix-clone/src/Row.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport Youtube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\n//a snippet of code which runs based on a specific condition/variable\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    //if [], run once when the row loads, and don't run again\n    async function fetchData() {\n      //await -> wait for the promise to come back, then do something with it\n      const request = await axios.get(fetchUrl);\n      console.log(request.data.results);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  console.table(movies);\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","Youtube","movieTrailer","jsxDEV","_jsxDEV","base_url","Row","title","fetchUrl","isLargeRow","_s","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","console","log","data","results","opts","height","width","playerVars","autoplay","table","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","src","poster_path","backdrop_path","alt","id","videoId","_c","$RefreshReg$"],"sources":["/Users/suchirmvelpanur/Desktop/netflix-clone/src/Row.js"],"sourcesContent":["import React from 'react'\nimport { useState, useEffect } from 'react'\nimport axios from './axios'\nimport './Row.css'\nimport Youtube from 'react-youtube'\nimport movieTrailer from 'movie-trailer'\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\n//a snippet of code which runs based on a specific condition/variable\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n    useEffect(() => {\n        //if [], run once when the row loads, and don't run again\n        async function fetchData() {\n            //await -> wait for the promise to come back, then do something with it\n            const request = await axios.get(fetchUrl);\n            console.log(request.data.results);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n        height: '390',\n        width: '100%',\n        playerVars: {\n            autoplay: 1,\n        },\n    };\n    console.table(movies);\n    const handleClick = (movie) => {\n        if(trailerUrl) {\n            setTrailerUrl('');\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then(url => {\n                const urlParams = new URLSearchParams(new URL(url).search);\n                setTrailerUrl(urlParams.get('v'));\n            })\n            .catch(error => console.log(error));\n        }\n    }\n\n  return (\n    <div className='row'>\n        {/* title */}\n        <h2>{title}</h2>\n        <div className='row_posters'>\n            {/* several row_poster(s) */}\n            {movies.map(movie => (\n                <img \n                key = {movie.id}\n                onClick={() => handleClick(movie)}\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`} \n                src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                alt={movie.name}/>\n            ))}\n        </div>\n        {/* container -> posters */}\n        {trailerUrl && <Youtube videoId={trailerUrl} opts={opts}/>}\n    </div>\n  )\n}\n\nexport default Row"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}